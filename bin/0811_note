0811_note

-0810 복습-
*classpath 중요
비트 연산자 시험 나옴
jar 파일 만들기


package ABC.financedept
javac -d <path>
패키지는 -d 옵션을 줘서 그 경로에 패키지를 만들어야 한다


import 하는 순서
java -cp .;C:\Temp Employee.java
 1) 현재 디렉토리 
 2)Reference library(외부 라이브러리)에서 찾고
 3)classpath에서 찾고
 4)Class Not Found
 
 ---------------------------------------------------

 -0811-
 Static 용법 4가지
 1. static variable(static 변수)
 - 참조 없이 클래스의 이름으로 접근하기 위한 공유 변수
 2. static method(static 메소드)
 - 참조 없이 클래스의 이름으로 메소드에 접근하기 위해서
 3. static initialization block(static 초기화 블록)
 - static 변수와 상수의 초기화
 4. static class(static 클래스)
 
 ex)
 	private String name; // member 변수
	private final double PI; // member 상수
	private static int age; // static 변수
	private static final boolean FLAG; // static 상수
	
	{ //Initialization block(초기화 블럭)
		this.name = "한지민"; //멤버 변수 초기화
		System.out.println("나는 생성자보다 먼저 호출되는데, 다시는 재호출할 수 없다.");
	}
	
	static { static Initialization block(static 초기화 블럭)
		age = 26; //static 변수 초기화
		FLAG = true; //static 상수 초기화
	}
	
--------------------------------------------------------

Final 용법 3가지
1. Final Variable(Final 변수)
- 자바의 상수
2. Final Method(Final 메소드)
- Override 금지
3. Final Class(Final 클래스)
- 상속의 금지

ex)
public class FinalDemo {
	private final double PI = Math.PI; //Member Constant(멤버 상수)
	private static final boolean FLAG = true; //Static Constant(Static 상수)
			
	public static void main(String[] args) {
		final String NAME = "한지민"; //Local Constant(로컬 상수)
		
	}

abstract와 final은 같이 사용할 수 없다 (서로 상극인 관계)
*abstract -> 부모의 자식이 재정의(@Override)를 필수로 하게 한다

클래스에 final을 붙여버리면 안에 있는 메소드 모두 final 메소드가 되어버린다
ex)
final class Parent{
	public void display() {System.out.println("나는 부모의 메소드");
	}
	
-----------------------------------------------------------

람다로 사용하려면
인터페이스 안에 해당 메소드에 멤버가 하나밖에 없다면
람다로 변환 가능(@FunctionalInterface)


 
 